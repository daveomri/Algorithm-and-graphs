Známý obchodní holding má v poslední době problém s inventarizací svého zboží. Nezřídka se stává, že na prodejně chybí zboží, 
které je propagováno ve slevových letácích. To vede k všeobecné nespokojenosti zákazníků, ale také zaměstnanců, kteří jsou 
nuceni tuto stále se více opakující se situaci řešit a omlouvat se za ní. Z toho důvodu vás holding kontaktoval s otázkou, 
zda byste mu nebyli schopni pomoci.

Obchodní holding je rozdělený do několika řetězců, identifikovaných přirozeným číslem. Podle toho, jak se holdingu daří, 
občas nějaký řetězec vznikne, občas zanikne. Každý řetězec má k dispozici seznam druhů zboží (ty jsou identifikované přirozenými čísly), 
které se v daném řetězci prodávají, spolu s celočíselným ohodnocením toho, jakou má daný druh zboží výnosnost (čím vyšší číslo, tím vyšší výnosnost). 
V řetězcích druhy zboží průběžně přibývají a ubývají. Odebrání nějakého druhu zboží z řetězce probíhá v pořadí od těch druhů zboží, 
které mají nejnižší výnosnost. Řetězce si vzájemně v prodejích nekonkurují, a mají tedy různé druhy zboží. 
Vzhledem ke zmíněným problémům s inventarizací však není zaručeno, že jsou všechny identifikátory druhů zboží unikátní 
(a to ani napříč různými řetězci, ani v rámci jednoho řetězce). Odebírání zboží se ale vždy týká jen jednoho konkrétního 
druhu zboží v jednom konkrétním řetězci, nikoliv všech druhů zboží sdílejících (nejspíše chybně) stejný identifikátor. 
Stejně tak dává smysl přidání zboží s, v nějakém řetězci již existujícím, identifikátorem, neboť může jít pouze 
o špatně označený druh zboží. Čas od času se management holdingu z důvodu špatných prodejů rozhodne sloučit dohromady 
dva řetězce do jednoho. Je-li pak situace hodně kritická, může přijít příkaz na sloučení dvou řetězců, které mají zboží 
s nejnižší výnosností. Také vznikají nové řetězce, ale jelikož je korporátní struktura holdingu značně zkostnatělá, poznáte 
to nejspíše až tehdy, když na daný řetězec přijde nějaký požadavek. Někdy se také stává, že do běhu řetězců zasáhne 
sám CEO holdingu, a vydá rozkaz odebrat ten druh zboží, které má nejnižší výnosnost napříč všemi řetězci.

Vašim úkolem je napsat pro holding informační systém. Jeho základní rozhraní je dané následující třídou:

class CHolding
{
  public:
   // default constructor
   // destructor  
   void Add    (int chain, unsigned int id, unsigned int revenue);
   bool Remove (int chain, unsigned int & id);
   bool Remove (unsigned int & id);
   void Merge  (int dstChain, int srcChain);
   bool Merge  (void);
  private:
   // todo
};
Add (chain, id, revenue)
tento příkaz říká přidej řetězci chain do seznamu druh zboží id s výnosností revenue,
Remove (chain, id)
znamená nalezni v řetězci chain nejméně výnosný druh zboží, zjisti a do výstupního parametru id ulož jeho ID a smaž jej 
ze seznamu zboží daného řetězce. V takovém případě (úspěch) metoda vrací true. Pokud je seznam druhů zboží zadaného 
řetězce prázdný, metoda má návratovou hodnotu false.
Remove (id)
znamená nalezni druh zboží s nejnižší výnosností napříč všemi řetězci, zjisti a do výstupního parametru id ulož jeho ID a smaž jej ze seznamu zboží daného
řetězce. V takovém případě (úspěch) metoda vrací true. Pokud jsou seznamy druhů zboží všech řetězců zcela prázdné, metoda má návratovou hodnotu false.
Merge (dstChain, srcChain)
znamená sluč řetězce dstChain a srcChain do výsledného dstChain. Může se stát, že dstChain == srcChain.
Merge ()
znamená sluč dohromady dva řetězce R_1 a R_2, které obsahují nejméně výnosný druh zboží napříč všemi řetězci, 
do výsledného řetězce s číslem min(R_1, R_2), tj. číslem, které je rovno menšímu z čísel daných dvou řetězců. 
Formálně je R_1 řetězec obsahující nejméně výnosný druh zboží napříč všemi řetězci a R_2 je řetězec obsahující 
nejméně výnosný druh zboží napříč všemi řetězci kromě řetězce R_1. V případě úspěchu metoda vrací true. 
Pokud řetězec R_1 či R_2 neexistují, metoda má návratovou hodnotu false.
Dále:
Může se stát, že nezodpovědný pracovník bude požadovat odebrání druhu zboží z řetězce, který má prázdný seznam zboží.
K tomu slouží návratová hodnota false dané metody.
Bohužel se nedozvíte, že byl založen nový řetězec, zjistíte to poprvé až na něj přijde požadavek. 
Seznam druhů zboží v nově vzniklém řetězci je samozřejmě prázdný.
Číslo řetězce je 1 ≤ chain ≤ 10000.
Číslo druhu zboží je 0 ≤ id < 232, není nicméně zaručeno, že jsou všechny identifikátory unikátní.
Výnosnost je 0 < revenue < 232 - 1.
Identifikátory se mohou recyklovat, tedy jednou odebraný identifikátor se může objevit znovu
Pokud se stane, že příkazu Remove(id) vyhovuje více druhů zboží, má přednost druh zboží v seznamu řetězce s nižším id.
Stejně tak vyhovují-li příkazu Merge() více než dva řetězce, mají přednost řetězce s nižším id.
Pokud v seznamu jednoho řetězce příkazu Remove vyhovuje více druhů zboží, má přednost druh zboží s nižším id.
Knihovna STL nevyhovuje hygienickým předpisům pro provozování řetězců a nelze jí tedy používat.
Můžete se spolehnout, že vstupní parametry metod budou zadávány korektně.
Bodové podmínky:

Pro splnění povinných testů je zapotřebí, aby program fungoval korektně pro vstupy obsahující řádově tisíce příkazů. Příkazy nebudou typu Merge.
Pro splnění testu velkými daty #1 musí program splnit časový limit pro vstupy obsahující řádově miliony příkazů. Příkazy nebudou typu Merge.
Pro splnění testu velkými daty #2 musí program splnit časový limit pro vstupy obsahující řádově miliony příkazů. Příkazy mohou být všech typů.
Testy podle ukázky jsou z důvodu omezení typů příkazů na vstupu provedeny ve dvou různých testech. 
První z nich testuje ukázkové vstupy 1 až 3 a je povinný. Druhý testuje ukázkové vstupy 4 až 7 a je nepovinný.
Ukázka práce:
bool res;
unsigned int id;

//Ukazkovy vstup #1
//-----------------
CHolding f1;
f1 . Add ( 7, 2, 9 );
f1 . Add ( 12, 4, 4 );
f1 . Add ( 6, 15, 2 );
f1 . Add ( 6, 9, 3 );
res = f1 . Remove ( 12, id );
 // res = true, id = 4
res = f1 . Remove ( 12, id );
 // res = false, id = N/A
res = f1 . Remove ( 6, id );
 // res = true, id = 15
res = f1 . Remove ( 6, id );
 // res = true, id = 9
res = f1 . Remove ( 6, id );
 // res = false, id = N/A


//Ukazkovy vstup #2
//-----------------
CHolding f2;
f2 . Add ( 4, 2, 2 );
f2 . Add ( 1, 4, 3 );
f2 . Add ( 8, 9, 8 );
res = f2 . Remove ( id );
 // res = true, id = 2
res = f2 . Remove ( id );
 // res = true, id = 4


//Ukazkovy vstup #3
//-----------------
CHolding f3;
f3 . Add ( 10, 101, 9 );
f3 . Add ( 10, 102, 8 );
f3 . Add ( 10, 103, 7 );
f3 . Add ( 10, 104, 6 );
f3 . Add ( 10, 105, 5 );
f3 . Add ( 20, 201, 9 );
f3 . Add ( 20, 202, 8 );
f3 . Add ( 20, 203, 7 );
f3 . Add ( 20, 204, 6 );
f3 . Add ( 20, 205, 5 );
f3 . Add ( 30, 301, 9 );
f3 . Add ( 30, 302, 8 );
f3 . Add ( 30, 303, 7 );
f3 . Add ( 30, 304, 6 );
f3 . Add ( 30, 305, 5 );
res = f3 . Remove ( id );
 // res = true, id = 105
res = f3 . Remove ( id );
 // res = true, id = 205
res = f3 . Remove ( id );
 // res = true, id = 305
res = f3 . Remove ( id );
 // res = true, id = 104
res = f3 . Remove ( id );
 // res = true, id = 204
res = f3 . Remove ( id );
 // res = true, id = 304
res = f3 . Remove ( id );
 // res = true, id = 103
res = f3 . Remove ( id );
 // res = true, id = 203
res = f3 . Remove ( id );
 // res = true, id = 303
res = f3 . Remove ( id );
 // res = true, id = 102
res = f3 . Remove ( id );
 // res = true, id = 202
res = f3 . Remove ( id );
 // res = true, id = 302


//Ukazkovy vstup #4
//-----------------
CHolding f4;
f4 . Add ( 10, 101, 9 );
f4 . Add ( 10, 102, 8 );
f4 . Add ( 10, 103, 7 );
f4 . Add ( 10, 104, 6 );
f4 . Add ( 10, 105, 5 );
f4 . Add ( 20, 201, 9 );
f4 . Add ( 20, 202, 8 );
f4 . Add ( 20, 203, 7 );
f4 . Add ( 20, 204, 6 );
f4 . Add ( 20, 205, 5 );
f4 . Add ( 30, 301, 9 );
f4 . Add ( 30, 302, 8 );
f4 . Add ( 30, 303, 7 );
f4 . Add ( 30, 304, 6 );
f4 . Add ( 30, 305, 5 );
res = f4 . Remove ( 30, id );
 // res = true, id = 305
res = f4 . Remove ( 20, id );
 // res = true, id = 205
res = f4 . Remove ( 10, id );
 // res = true, id = 105
f4 . Merge ( 30, 10 );
res = f4 . Remove ( 10, id );
 // res = false, id = N/A
res = f4 . Remove ( 20, id );
 // res = true, id = 204
res = f4 . Remove ( 30, id );
 // res = true, id = 104
res = f4 . Remove ( id );
 // res = true, id = 304
res = f4 . Remove ( id );
 // res = true, id = 203
res = f4 . Remove ( id );
 // res = true, id = 103
res = f4 . Remove ( id );
 // res = true, id = 303
res = f4 . Remove ( id );
 // res = true, id = 202
res = f4 . Remove ( id );
 // res = true, id = 102
res = f4 . Remove ( id );
 // res = true, id = 302
res = f4 . Remove ( id );
 // res = true, id = 201
res = f4 . Remove ( id );
 // res = true, id = 101
res = f4 . Remove ( id );
 // res = true, id = 301
res = f4 . Remove ( id );
 // res = false, id = N/A
res = f4 . Remove ( id );
 // res = false, id = N/A


//Ukazkovy vstup #5
//-----------------
CHolding f5;
f5 . Add ( 10, 333, 5 );
f5 . Add ( 20, 444, 2 );
f5 . Add ( 10, 222, 6 );
f5 . Add ( 20, 555, 8 );
res = f5 . Remove ( 10, id );
 // res = true, id = 333
res = f5 . Remove ( id );
 // res = true, id = 444
f5 . Merge ( 20, 10 );
res = f5 . Remove ( 10, id );
 // res = false, id = N/A
res = f5 . Remove ( 20, id );
 // res = true, id = 222


//Ukazkovy vstup #6
//-----------------
CHolding f6;
f6 . Add ( 10, 1, 7 );
f6 . Add ( 20, 1, 7 );
f6 . Add ( 30, 1, 7 );
res = f6 . Merge ( );
 // res = true
res = f6 . Remove ( 20, id );
 // res = false, id = N/A
res = f6 . Remove ( 30, id );
 // res = true, id = 1
res = f6 . Remove ( 30, id );
 // res = false, id = N/A
res = f6 . Remove ( 10, id );
 // res = true, id = 1
res = f6 . Remove ( 10, id );
 // res = true, id = 1
res = f6 . Remove ( 10, id );
 // res = false, id = N/A


//Ukazkovy vstup #7
//-----------------
CHolding f7;
f7 . Add ( 1, 1, 1 );
f7 . Add ( 2, 2, 1 );
f7 . Add ( 3, 3, 1 );
res = f7 . Merge ( );
 // res = true
res = f7 . Merge ( );
 // res = true
res = f7 . Merge ( );
 // res = false
res = f7 . Remove ( id );
 // res = true, id = 1
res = f7 . Remove ( id );
 // res = true, id = 2
res = f7 . Remove ( id );
 // res = true, id = 3
res = f7 . Remove ( id );
 // res = false, id = N/A
